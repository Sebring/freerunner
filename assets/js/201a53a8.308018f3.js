"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[898],{6045:function(e,n,o){o.r(n),o.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return m},default:function(){return c}});var t=o(7462),a=o(3366),r=(o(7294),o(3905)),i=["components"],l={},s="Entities and Components",p={unversionedId:"Guides/components",id:"Guides/components",isDocsHomePage:!1,title:"Entities and Components",description:"The core of a Freerunner game is it's collection of components.",source:"@site/docs/Guides/components.md",sourceDirName:"Guides",slug:"/Guides/components",permalink:"/freerunner/docs/Guides/components",editUrl:"https://github.com/sebring/freerunner/edit/docs/Guides/components.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Quickstart",permalink:"/freerunner/docs/Getting Started/quickstart"}},m=[],d={toc:m};function c(e){var n=e.components,o=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,t.Z)({},d,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"entities-and-components"},"Entities and Components"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"The core of a Freerunner game is it's collection of components.")),(0,r.kt)("p",null,"During development you will create lots of ",(0,r.kt)("em",{parentName:"p"},"components")," that defines special attributes or behaviours.\nKeep the components small and grow complexity by combining components.\nThese components will make our ",(0,r.kt)("em",{parentName:"p"},"entities")," come alive and have them being rendered, collieded with or even killed by depending on our game genre."),(0,r.kt)("p",null,"The most basic components are ",(0,r.kt)("inlineCode",{parentName:"p"},"2D")," that defines position ",(0,r.kt)("inlineCode",{parentName:"p"},"{x, y}")," and size ",(0,r.kt)("inlineCode",{parentName:"p"},"{h, w}")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Color")," that will fill a ",(0,r.kt)("inlineCode",{parentName:"p"},"2D")," with a solid color."),(0,r.kt)("p",null,"Let's say we want a brown box in our game represented as a brown square to keep sprites out of the example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let brownBox = F.e('Box') // e for entity\n\nbrownBox.addComponent('2D')\nbrownBox.addComponent('Color')\n\nbrownBox.attr({ x:10, y:10, h:20, w:20 })\nbrownBox.color('brown')\n")),(0,r.kt)("p",null,"Easy to follow, right? But lots of code such a simple game object. Let's create a more generic component for our box."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"F.c('Box') // c for component\n  .addComponent('2D, Color')  // this time we chain\n  .attr(({ x:10, y:10, h:20, w:20 }))\n  .color('brown')\n\nlet brownBox = F.e('BrownBox, Box') // e for.. you know by now\n// another one, but red\nlet redBox = F.e('RedBox, Box').color('red')\n")),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If you try this code you will also need to add the component 'DOM' or 'Canvas' to actually have it rendered."))),(0,r.kt)("p",null,"While the above code was valid, below is an ",(0,r.kt)("em",{parentName:"p"},"dreamcode")," example of how powerful the component entity pattern is."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"F.c('Plumber')\n    .addComponent('Jumper, Collector, Stomper')\n    .speed(200)\nF.c('HedgeHog')\n    .addComponent('Jumper, Collector, Spinner')\n    .speed(500)\n\nlet player1 = F.e('Mario, Plumber')\n    .addComponent('Controllable').controller(1)\nlet player2 = F.e('Sonic, Hedgehog')\n    .addComponent('Controllable').controller(2)\nlet player3 = F.e('Luigi, Plumber')\n    .addComponent('Controllable').controller(3)\n\nfor (let i; i<10; i++) {\n    F.e('Goombas, Stompable, Spinnable, RandomSpawnPos')\n    F.e('Star, Collectable, RandomSpawnPos')\n}\n")),(0,r.kt)("p",null,"Read more on entities and components."),(0,r.kt)("p",null,"Communication is event-driven. A component might listen to a 'move'-event, check for collisions and then fire a 'collide'-event on the other component. This way components can be self-sustained we ensure low coupling."))}c.isMDXComponent=!0}}]);